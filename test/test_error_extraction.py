import unittest
import random
import sys
import json

from impact.impactanalysis import ImpactAnalysis

class TestMCImpactAmplitude(unittest.TestCase):

	def setUp(self):
		self.nom_values, self.nom_errors = [(1.0370061800516306, 1.0372983533134226, 1.036092863164242, 1.0311564973855383, 1.0253013114648382, 1.01948298657363, 1.0107292424454208, 1.001325615990579, 0.9873259608141465, 0.9763023247313569, 0.9622722511367852, 0.9450458831233273, 0.9328181634144246, 0.9152910168960039, 0.8955880087529824, 0.8815649546511081, 0.8639115928805797, 0.8439386109874322, 0.8264980269422686, 0.8081257283861998, 0.7884951338251971, 0.7709598451698593, 0.7515437567121722, 0.7304456705999608, 0.7100714088946645, 0.691737012029259, 0.6729300454630949, 0.6513642106245375, 0.634014884696294, 0.6149543977032594, 0.5923578736065233, 0.5733514753463227, 0.5550055037822774, 0.5383137646670565, 0.5192422918562248, 0.5021204792548176, 0.48392915031435224, 0.46615359461654327, 0.446512569527712, 0.4291913575226169, 0.4102666424836241, 0.39515342514778234, 0.3784218260803354, 0.3613877128466543, 0.3425505363565128, 0.3232604791044819, 0.3081883943977429, 0.2917096390876884, 0.27723022148263626, 0.2614234626766208, 0.24744971586348674, 0.23236688539819605, 0.21945199722663974, 0.20715185798859892, 0.19135527711971298, 0.17994794210148826, 0.16847778462029805, 0.15608818153277812, 0.1448187559306355, 0.13485268846733234, 0.12419055417765427, 0.11548321860385762, 0.10635829432618062, 0.09759295026477596, 0.08868756242367509, 0.08185553547379976, 0.07386600006205954, 0.06689473716845727, 0.06171540618117851, 0.055879459001438675, 0.050855281595187506, 0.04528351290757611, 0.041016188815468924, 0.03597214011333676, 0.03265246017994855, 0.029058492537509327, 0.026208409871506615, 0.023598983977353508, 0.02118790076243817, 0.018841995286541628, 0.017166934880312606, 0.015421941600069785, 0.013860905744813488, 0.012623653139745769, 0.011397961689031061, 0.010220827264517136, 0.008966427997375884, 0.008391966263432365, 0.007734590246869132, 0.007259196173414373, 0.007370050598589048, 0.006407332644199173, 0.007156891075889341, 0.005955852099683455, 0.005770188062414646, 0.005213136911065695, 0.004978077385579438, 0.0055058869102886385, 0.005424798836428831, 0.004770664819160232, 0.004683524549175787), (0.019880817347714585, 0.022244590276098687, 0.025597333331853045, 0.01938228874237322, 0.021060888685620085, 0.019163382269121492, 0.01874803892718163, 0.020866694998224557, 0.024960836831208127, 0.01724704469109821, 0.020950979549263005, 0.021322227831039986, 0.01989336437016299, 0.02143443564197712, 0.019279318025331615, 0.01793629728832321, 0.018263786011785917, 0.02013777555784939, 0.0196173465013711, 0.01724727227975209, 0.01887408254521526, 0.019238196444618168, 0.017837718627756575, 0.01760127515556527, 0.017699353169249414, 0.016082189308803282, 0.016623346356261667, 0.017184569302519975, 0.017432117628470443, 0.01593112099819412, 0.016186344199081982, 0.019881792409046976, 0.01680422134492425, 0.01570283214276602, 0.014292854689263407, 0.014918164486613691, 0.015275922940728087, 0.013099699473136285, 0.012431699351827667, 0.011902593043103014, 0.016115235841632495, 0.01341371109959569, 0.015343691302866096, 0.013440043119200686, 0.012269352210827872, 0.012648401796587074, 0.013960773651214703, 0.018245168458795112, 0.011116172953671942, 0.011093493024970882, 0.010382013865583167, 0.01015138092993606, 0.009513847790369935, 0.014351380839196886, 0.00957756173550842, 0.012236660748881207, 0.00998049737710254, 0.009239331755802422, 0.009232838559538652, 0.008807398917031391, 0.009983822131151496, 0.00781745316074939, 0.009018274619840009, 0.010526832446257196, 0.009266920487346108, 0.00873474432976145, 0.009476769106644205, 0.009738573649539126, 0.0075846826534886735, 0.006983881636646855, 0.007599962979723367, 0.009928299282146417, 0.00673650159262163, 0.006171972444839339, 0.006492752415926356, 0.006520192226423716, 0.00601921275260448, 0.006451040701706195, 0.005868864743272559, 0.005067929080926648, 0.005908072640938991, 0.0055964338784867925, 0.0069016992271064915, 0.005588331555857215, 0.0058349406337412524, 0.004304157366354565, 0.005402651435059276, 0.005514083861044424, 0.004888353888118106, 0.005473725507357138, 0.0053246703465871055, 0.005433919720844922, 0.006234138882405723, 0.004234281612755809, 0.003731838180566194, 0.00411197470741319, 0.003917708166860404, 0.004711313987895265, 0.003744973010747109, 0.00410056102202455, 0.003455627575351364)]
		# This is important
		random.seed(1234)
		with open('config/input.json') as f:
			self.data = json.load(f)


	def testValues(self):

		ENERGY = 7000
		RHO    = 0.14
		SIGMA  = 98.3
		DSIGMA = 2.23
		DRHO =   0.007
		PROCESS = 'pp'

		analysis = ImpactAnalysis(self.data['infile'], PROCESS, ENERGY, SIGMA, RHO, DSIGMA, DRHO, 100)
		values, errors = analysis.run()

		# Test values
		for a, b in zip(values, self.nom_values):
				self.assertAlmostEqual(a, b)

		# Test errors
		for a, b in zip(errors, self.nom_errors):
				self.assertAlmostEqual(a, b)
